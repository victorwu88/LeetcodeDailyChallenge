class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        n = len(nums)
        arr = [[v, i] for i, v in enumerate(nums)] # record value and index
        result = [0] * n
        
        def merge_sort(arr, left, right):
            # merge sort [left, right) from small to large, in place
            if left + 1 >= right:
                return
            mid = (left + right) // 2
            merge_sort(arr, left, mid)
            merge_sort(arr, mid, right)
            merge(arr, left, right, mid)
            
        def merge(arr, left, right, mid):
            # merge [left, mid) and [mid, right)
            i = left # current index for the left array
            j = mid # current index for the right array
            # use temp to temporarily store sorted array
            temp = []
            while i < mid and j < right:
                if arr[i][0] <= arr[j][0]:
                    # j - mid numbers jump to the left side of arr[i]
                    result[arr[i][1]] += j - mid
                    temp.append(arr[i])
                    i += 1
                else:
                    temp.append(arr[j])
                    j += 1
                    
            # when one of the subarrays is empty
            while i < mid:
                # j - mid numbers jump to the left side of arr[i]
                result[arr[i][1]] += j - mid # this step is very important
                temp.append(arr[i])
                i += 1
                
            while j < right:
                temp.append(arr[j])
                j += 1
                
            # restore from temp
            for i in range(left, right):
                arr[i] = temp[i - left]
                
        merge_sort(arr, 0, n)
        return result
    
    
    # solution 2:
     # implement binary index tree
        def update(index, value, tree, size):
            index += 1 # index in BIT is 1 more than the original index
            while index < size:
                tree[index] += value
                index += index & -index
                
        def query(index, tree):
            # return sum of [0, index)
            result = 0 
            while index >= 1:
                result += tree[index]
                index -= index & -index 
                
            return result
        
        
        offset = 10**4 # offset negative to non-negative
        size = 2 * 10**4 + 2 # total possible values in nums plus one dummy
        tree = [0] * size
        result = []
        for num in reversed(nums):
            smaller_count = query(num + offset, tree)
            result.append(smaller_count)
            update(num + offset, 1, tree, size)
            
        return reversed(result)
