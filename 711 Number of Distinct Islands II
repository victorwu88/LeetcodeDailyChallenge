class Solution:
    def dfs(self, grid, r, c, shape):
        grid[r][c] = 0
        shape.append((r, c))

        m, n = len(grid), len(grid[0])
        directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]

        for d in directions:
            nr, nc = r + d[0], c + d[1]
            if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] != 0:
                self.dfs(grid, nr, nc, shape)

    def normalize(self, shape):
        rotated_shapes = [[] for _ in range(8)]
        norm_res = []

        for p in shape:
            x, y = p
            rotated_shapes[0].append((x, y))
            rotated_shapes[1].append((-x, y))
            rotated_shapes[2].append((x, -y))
            rotated_shapes[3].append((-x, -y))
            rotated_shapes[4].append((y, x))
            rotated_shapes[5].append((-y, x))
            rotated_shapes[6].append((y, -x))
            rotated_shapes[7].append((-y, -x))

        for rs in rotated_shapes:
            rs.sort()

        for rs in rotated_shapes:
            tmp = [(0, 0)]
            for i in range(1, len(rs)):
                tmp.append((rs[i][0]-rs[0][0], rs[i][1]-rs[0][1]))
            norm_res.append(tmp[:])
        
        norm_res.sort()

        return tuple(norm_res[0])

    def numDistinctIslands2(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        res = set()
        for r in range(0, m):
            for c in range(0, n):
                if grid[r][c] == 1:
                    shape = []
                    self.dfs(grid, r, c, shape)
                    norm = self.normalize(shape)
                    res.add(norm)

        return len(res)
    
    
    # solution 2:
    def numDistinctIslands2(self, grid: List[List[int]]):
   
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid or not grid[0]: return 0
        m,n=len(grid),len(grid[0])

        # augment matrix to void length check
        grid.append([0]*n)
        for row in grid: row.append(0)

        self.pool=set()
        self.res=0

        def bfs(i0,j0):
            grid[i0][j0]=-1
            q=[(i0,j0)]
            for i,j in q:
                for I,J in (i-1,j),(i+1,j),(i,j-1),(i,j+1):
                    if grid[I][J]==1:
                        grid[I][J]=-1
                        q.append([I,J])
            self.addisland(q)
       
        for i in range(m):
            for j in range(n):
                if grid[i][j]==1: bfs(i,j)

        return self.res

    def addisland(self,q):
            Imin=min(x for x,y in q)
            Jmin=min(y for x,y in q)
            island1=tuple(sorted((x-Imin,y-Jmin) for x,y in q)) # original island
           
            if island1 in self.pool: return None
            self.res+=1

            Imax=max(x for x,y in island1)
            Jmax=max(y for x,y in island1)

            island2=tuple(sorted((-x+Imax,y) for x,y in island1)) # x axis mirror
            island3=tuple(sorted((x,-y+Jmax) for x,y in island1)) # y axis mirror
            island4=tuple(sorted((-x+Imax,-y+Jmax) for x,y in island1)) # origin mirror

            island5=tuple(sorted((y,x) for x,y in island1)) # diagonal mirror
            island6=tuple(sorted((-x+Jmax,y) for x,y in island5))
            island7=tuple(sorted((x,-y+Imax) for x,y in island5))
            island8=tuple(sorted((-x+Jmax,-y+Imax) for x,y in island5))

            self.pool|=set([island1,island2,island3,island4,island5,island6,island7,island8])
        
