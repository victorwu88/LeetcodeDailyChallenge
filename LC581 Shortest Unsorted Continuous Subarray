class Solution:   
    # solution 3:
    # without extra space
    def findUnsortedSubarray(self, nums):
        min_num, max_num = float('inf'), float('-inf')
        flag = False
        n = len(nums)
        for i in range(1, n):
            if nums[i] < nums[i-1]:
                flag = True
                
            if flag:
                min_num = min(min_num, nums[i])
                
        flag = False
        for i in range(n-2, -1, -1):
            if nums[i] > nums[i+1]:
                flag = True
                
            if flag:
                max_num = max(max_num, nums[i])
        
        for left in range(n):
            if min_num < nums[left]:
                break
                
        for right in range(n-1, -1, -1):
            if max_num > nums[right]:
                break
                
        return right - left + 1 if right - left > 0 else 0 # the java solution is wrong!
    
     def findUnsortedSubarray(self, nums: List[int]) -> int:
        # solution 1
        snums = nums.copy()
        snums.sort()
        n = len(snums)
        start, end = n, 0
        
        for i in range(n):
            if snums[i] != nums[i]:
                start = min(start, i)
                end = max(end, i)
                
        return end - start + 1 if end - start >= 0 else 0
    
    # solution 2
    
        n = len(nums)
        l, r = n, 0
        for i in range(n-1):
            for j in range(i+1, n):
                if nums[j] < nums[i]:
                    r = max(r, j)
                    l = min(l, i)

        return r - l + 1 if r - l >= 0 else 0
        
