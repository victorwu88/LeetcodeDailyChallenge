class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        self.dfs(nums, 0, [], res)
        return res
    
    def dfs(self, nums, index, path, res):
        res.append(path)
        for i in range(index, len(nums)):
            if i > index and nums[i] == nums[i - 1]:
                continue
                
            self.dfs(nums, i + 1, path + [nums[i]], res)
            
    # converted from java solution
        subsets = []
        n = len(nums)
        nums.sort()
        
        maxNumberOfSubsets = pow(2, n)
        seen = set()
        
        for subsetIndex in range(maxNumberOfSubsets):
            
            currentSubset = []
            hashcode = ""
            
            for j in range(n):
                mask = 1 << j
                isSet = mask & subsetIndex
                
                if isSet:
                    currentSubset.append(nums[j])
                    hashcode += str(nums[j])
                    
            if hashcode not in seen:
                seen.add(hashcode)
                subsets.append(currentSubset)
                
        return subsets
