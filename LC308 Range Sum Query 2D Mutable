class NumMatrix:        
    def __init__(self, matrix):
        if not matrix: return
        self.M, self.N = len(matrix), len(matrix[0])
        self.mat  = [[0] * self.N for _ in range(self.M)]
        self.BIT  = [[0] * (self.N + 1) for _ in range(self.M + 1)]
        for i in range(self.M):
            for j in range(self.N):
                self.update(i, j, matrix[i][j])

    def update(self, row, col, val):
        diff =  val-self.mat[row][col]
        i, self.mat[row][col] = row + 1, val
        while i <= self.M:
            j = col + 1
            while j <= self.N:
                self.BIT[i][j] += diff
                j += (j & -j)
            i += (i & -i)       

    def sumRegion(self, row1, col1, row2, col2):
        return self.sumCorner(row2, col2)         + \
               self.sumCorner(row1 - 1, col1 - 1) - \
               self.sumCorner(row1 - 1, col2)     - \n
               self.sumCorner(row2, col1 - 1)

    def sumCorner(self, row, col):
        res, i = 0, row + 1
        while i:
            j = col + 1
            while j:
                res += self.BIT[i][j]
                j -= (j & -j)
            i -= (i & -i)
        return res
    
# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# obj.update(row,col,val)
# param_2 = obj.sumRegion(row1,col1,row2,col2)
