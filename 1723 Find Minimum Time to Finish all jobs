class Solution(object):
    def minimumTimeRequired(self, jobs, k):
        """
        :type jobs: List[int]
        :type k: int
        :rtype: int
        """
        
        n = len(jobs)
        jobs.sort(reverse=True) # opt 1

        def dfs(i):
            if i == n: return True # opt 3
            for j in xrange(k):
                if cap[j] >= jobs[i]:
                    cap[j] -= jobs[i]
                    if dfs(i + 1): return True
                    cap[j] += jobs[i]
                if cap[j] == x: break # opt 2
            return False

        # binary search
        left, right = max(jobs), sum(jobs)
        while left < right:
            x = (left + right) / 2
            cap = [x] * k
            if dfs(0):
                right = x
            else:
                left = x + 1
        return left
