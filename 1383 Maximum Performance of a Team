class Solution:
    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:
        modulo = 10 ** 9 + 7
        
        # build tuples of (efficiency, speed)
        candidates = zip(speed, efficiency)
        # sort the candidates by their efficiencies
        candidates = sorted(candidates, key = lambda t: t[1], reverse = True)
        
        speed_heap = []
        speed_sum, performance = 0, 0
        for cur_speed, cur_efficiency in candidates:
            # maintain a heap for the fastest (k-1) speeds
            if len(speed_heap) > k - 1:
                speed_sum -= heapq.heappop(speed_heap)
                
            heapq.heappush(speed_heap, cur_speed)
            
            # calculate the maximum performance with the current member as the 
            # least efficient one in the team
            speed_sum += cur_speed
            performance = max(performance, speed_sum * cur_efficiency)
            
        return performance % modulo
        
