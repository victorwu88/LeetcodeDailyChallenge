class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                   
                    self.dfs(grid,i,j)
                    count  += 1
        #print(grid)
        return count
    # use a helper function to flip connected '1's to 0
    def dfs(self,grid,i,j):
        grid[i][j] = 0
        for dr,dc in (1,0), (-1,0), (0,-1), (0,1):
            r = i + dr
            c = j + dc
            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c]=='1':
                self.dfs(grid,r,c)
                
                
    def numIslands(self, grid: List[List[str]]) -> int:
       #solution 2 BFS:
        if len(grid) == 0:
            return 0
        
        nr = len(grid)
        nc = len(grid[0])
        num_islands = 0
        
        for r in range(nr):
            for c in range(nc):
                if grid[r][c] == '1':
                    num_islands += 1
                    grid[r][c] = '0' # mark as visited
                    neighbors = []
                    neighbors.append(r * nc + c)
                    while neighbors:
                        id = neighbors.pop()
                        row = id // nc
                        col = id % nc
                        
                        if row - 1 >= 0 and grid[row - 1][col] == '1':
                            neighbors.append((row - 1) * nc + col)
                            grid[row - 1][col] = '0'
                            
                        if row + 1 < nr and grid[row + 1][col] == '1':
                            neighbors.append((row + 1) * nc + col)
                            grid[row + 1][col] = '0'
                            
                        if col - 1 >= 0 and grid[row][col - 1] == '1':
                            neighbors.append(row * nc + col - 1)
                            grid[row][col - 1] = '0'
                            
                        if col + 1 < nc and grid[row][col + 1] == '1':
                            neighbors.append(row * nc + col + 1)
                            grid[row][col + 1] = '0'
                            
        return num_islands
