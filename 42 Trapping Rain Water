class Solution:
    def trap(self, height: List[int]) -> int:
        # solution 4:
        n = len(height)
        if n == 0:
            return 0
        left, right = 0, n - 1
        ans = 0
        leftMax, rightMax = 0, 0
        
        while left < right:
            if leftMax < height[left]: leftMax = height[left]
            if rightMax < height[right]: rightMax = height[right]
                
            if leftMax < rightMax:
                ans += leftMax - height[left]
                left += 1
                
            else:
                ans += rightMax - height[right]
                right -= 1
                
        return ans
    #solution 1:
        ans = 0
        n = len(height)
        
        left_max, right_max = [0] * n, [0] * n
        left_max[0] = height[0]
        for i in range(1, n):
            left_max[i] = max(height[i], left_max[i - 1])
            
        right_max[n - 1] = height[n - 1]
        for i in range(n-2, -1, -1):
            right_max[i] = max(height[i], right_max[i + 1])
            
        for i in range(1, n - 1):
            ans += min(left_max[i], right_max[i]) - height[i]
            
        return ans
    # solution 2
        ans = 0
        n = len(height)
        stack = []
        i = 0
        while i < n:
            while stack and height[i] > height[stack[-1]]:
                top = stack[-1]
                stack.pop()
                if not stack:
                    break
                distance = i - stack[-1] - 1
                bounded_height = min(height[i], height[stack[-1]]) - height[top]
                
                ans += distance * bounded_height
                
            stack.append(i)
            i += 1
            
        return ans
       
    
    # solution 3: two pointers
        n = len(height)
        left, right = 0, n - 1
        ans = 0
        left_max, right_max = 0, 0
        while left < right:
            if height[left] < height[right]:
                if height[left] >= left_max:
                    left_max = height[left]
                else:
                    ans += left_max - height[left]
                    
                left += 1
                
            else:
                if height[right] >= right_max:
                    right_max = height[right]
                    
                else:
                    ans += right_max - height[right]
                    
                right -= 1
                
        return ans
