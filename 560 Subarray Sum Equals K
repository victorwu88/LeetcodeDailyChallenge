class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        total = 0
        for i in range(n):
            for j in range(i, n):
                if sum(nums[i:j+1]) == k:
                    total += 1
                    
        return total
        
        # brute force:
        count = 0
        n = len(nums)
        for start in range(n):
            for end in range(start + 1, n + 1):
                subarray_sum = 0
                for i in range(start, end):
                    subarray_sum += nums[i]
                if subarray_sum == k:
                    count += 1
                        
        return count
    
        # cumulative sum:
        count = 0
        n = len(nums)
        sum_pre = [] * (n + 1)
        sum_pre[0] = 0
        for i in range(1, n + 1):
            sum_pre[i] = sum_pre[i - 1] + nums[i - 1]
            
        for start in range(n):
            for end in range(start + 1, n + 1):
                if sum_pre[end] - sum_pre[start] == k:
                    count += 1
                    
        return count
       
    
    #hash map
        count = cum_sum = 0
        hp = collections.defaultdict(int)
        hp[0] = 1 # what's the concise solution?
        for i in range(len(nums)):
            cum_sum += nums[i]
            if cum_sum - k in hp:
                count += hp[cum_sum - k]
            hp[cum_sum] += 1
            
        return count
