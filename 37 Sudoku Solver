import collections
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows, cols, triples, visit = defaultdict(set), defaultdict(set), defaultdict(set), deque([])
        
        for r in range(9):
            for c in range(9):
                if board[r][c] != '.':
                    rows[r].add(board[r][c])
                    cols[c].add(board[r][c])
                    triples[(r//3, c//3)].add(board[r][c])
                    
                else:
                    visit.append((r, c))
                    
                    
        def dfs():
            if not visit:
                return True
            r, c = visit[0]
            
            t = (r//3, c//3)
            
            for num in ['1', '2', '3', '4', '5','6','7', '8', '9']:
                if num not in rows[r] and num not in cols[c] and num not in triples[t]:
                    board[r][c] = num
                    rows[r].add(num)
                    cols[c].add(num)
                    triples[t].add(num)
                    visit.popleft()
                    if dfs():
                        return True
                    
                    else:
                        board[r][c] ='.'
                        rows[r].discard(num) # remove funciton also work here
                        cols[c].discard(num)
                        triples[t].discard(num)
                        visit.appendleft((r, c))
                        
            return False
        dfs()
