class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
      
                
                
        chars = {} # collections.defaultdict(int)
        left = right = 0
        res = 0
        while right < len(s):
            r = s[right]
            if r not in chars: chars[r] = 0 # if chars = collections.defaultdict(int) this line # not needed, otherwise, have to be here
            chars[r] += 1
            
            while chars[r] > 1:
                l = s[left]
                chars[l] -= 1
                left += 1
                
                
            res = max(res, right - left + 1)
            
            right += 1
            
        return res
    
    # solution 2:
    def lengthOfLongestSubstring(self, s):
        n = len(s)
        ans  = 0
        # mp stores the current index of a character
        mp = {}
        
        i = 0
        for j in range(n):
            if s[j] in mp:
                i = max(mp[s[j]], i)
                
            ans = max(ans, j - i + 1)
            mp[s[j]] = j + 1
            
        return ans
