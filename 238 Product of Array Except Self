class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        n = len(nums)
        answer = [0] * n
        
        # answer[i] contains the product of all the elements to the left
        # for the element at index '0', there are no elements to the left
        answer[0] = 1
        for i in range(1, n):
            answer[i] = nums[i - 1] * answer[i - 1]
            
            
        # R contains the product of all the elements to the right
        # for the element at index 'n - 1', there are no elements to the right
        # the R would be 1
        R = 1
        for i in range(n - 1, -1, -1):
            answer[i] = answer[i] * R
            R *= nums[i]
            
        return answer
    
     # brute force
        out = []
        n = len(nums)
        for i in range(n):
            total = 1
            for j in range(i):
                total *= nums[j]
                
            for k in range(i+1, n):
                total *= nums[k]
                
            out.append(total)
            
        return out   
        #solution 2:
        n = len(nums)
        L, R, answer = [0] * n, [0] * n, [0] * n
        
        L[0] = 1
        for i in range(1, n):
            L[i] = nums[i - 1] * L[i - 1]
            
        R[n - 1] = 1
        for i in range(n - 2, -1, -1):
            #R[i+1] already contains the product of elements to the right of 
            # 'i + 1'
            R[i] = R[i + 1] * nums[i + 1]
            
        # constructing the answer array
        for i in range(n):
            answer[i] = L[i] * R[i]
            
        return answer
