class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        
        if obstacleGrid[0][0] == 1:
            return 0
        
        obstacleGrid[0][0] = 1 # number of ways of reaching the starting cell
        
        for i in range(1, m):
            obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1)
            
        for j in range(1, n):
            obstacleGrid[0][j] = int(obstacleGrid[0][j] == 0 and obstacleGrid[0][j-1] == 1)
            
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 0:
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]
                    
                else:
                    obstacleGrid[i][j] = 0
                    
                    
       # return the value stored in rightmost bottommost cell. 
    
        return obstacleGrid[m-1][n-1]
    
    
    # solution 2: in-place
    
    def uniquePathsWithObstacles(self, obstacleGrid):
        if not obstacleGrid:
            return 
        
        r, c = len(obstacleGrid), len(obstacleGrid[0])
        
        obstacleGrid[0][0] = 1 - obstacleGrid[0][0]
        
        for i in range(1, r):
            obstacleGrid[i][0] = obstacleGrid[i-1][0] * (1 - obstacleGrid[i][0])
            
        for i in range(1, c):
            obstacleGrid[0][i] = obstacleGrid[0][i-1] * (1 - obstacleGrid[0][i])
            
        for i in range(1, r):
            for j in range(1, c):
                obstacleGrid[i][j] = (obstacleGrid[i-1][j] + obstacleGrid[i][j-1]) * (1 - obstacleGrid[i][j])
                
        return obstacleGrid[-1][-1]
        
    
        
        
