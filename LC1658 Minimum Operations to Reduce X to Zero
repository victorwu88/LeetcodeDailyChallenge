class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        n = len(nums)
        mp = {0: 0}
        prefix = 0
        for i, num in enumerate(nums, 1):
            prefix += num
            mp[prefix] = i
            
        ans = mp.get(x, float('inf'))
        for i, num in enumerate(reversed(nums), 1):
            x -= num
            if x in mp and mp[x] + i <= n:
                ans = min(ans, i + mp[x])
                
        return ans if ans < float('inf') else -1
    
    # solution2
        n = len(nums)
        arr_sum = sum(nums)
        if arr_sum < x:
            return -1
        if arr_sum == x:
            return n
        
        required_subarray_sum = arr_sum - x
        left = curr_sum = max_subarray_size = 0
        for right, num in enumerate(nums):
            curr_sum += num
            while curr_sum > required_subarray_sum:
                curr_sum -= nums[left]
                left += 1
            if curr_sum == required_subarray_sum:
                max_subarray_size = max(max_subarray_size, right - left + 1)
                
        return n - max_subarray_size if max_subarray_size > 0 else -1
