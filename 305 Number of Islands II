class Solution:
    
    def dfs(self, grid, r, c, visited):
        nr, nc = len(grid), len(grid[0])
        
        if r < 0 or c < 0 or r >= nr or c >= nc or grid[r][c] == '0' or visited[r][c]:
            return 0
        
        visited[r][c] = True
        self.dfs(grid, r - 1, c, visited)
        self.dfs(grid, r + 1, c, visited)
        self.dfs(grid, r, c - 1, visited)
        self.dfs(grid, r, c + 1, visited)
        
        
        
    def numIslands(self, grid):
        if not grid or len(grid) == 0:
            return 0
        
        nr, nc = len(grid), len(grid[0])
        visited = [[False] * nc for _ in range(nr)]
        
        num_islands = 0
        
        for r in range(nr):
            for c in range(nc):
                if grid[r][c] == '1' and not visited[r][c]:
                    num_islands += 1
                    self.dfs(grid, r, c, visited)
                    
                    
                    
        return num_islands
    
    
    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:
        ans = []
        grid = [['0'] * n for _ in range(m)]  # '0' not 0, which takes me lots of time to debug~~~
        
        for pos in positions:
            grid[pos[0]][pos[1]] = '1'
            ans.append(self.numIslands(grid))
            
        return ans
    
    
   # solution union find
    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:
        def find(x):
            while x in pa:
                if pa[x] in pa:#path compress
                    pa[x]=pa[pa[x]]
                x=pa[x]
            return x    
        def union(x,y):
            pax,pay=find(x),find(y)
            if pax==pay:#union fail,has been unioned.
                return False
            pa[pax]=pay
            return True
        seen,pa,res,count=set(),{},[],0
        for x,y in positions:#connect with neighbor val==1,if union success,means one island disappear.
            if (x,y) not in seen:
                seen.add((x,y))
                count+=1
                for i,j in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:
                    if (i,j) in seen and union((i,j),(x,y)):
                        count-=1
            res.append(count)
        return res
        
